#!/usr/bin/env python3

# SPDX-License-Identifier: BSD-2-Clause
# Copyright (c) 2021, Konrad Weihmann

# This scripts converts graphs like task-depends.dot
# into filterable tree printed to console

# Possible TODO:
# - add a pkgdata mode to create a package tree

import argparse
import os
import re
import sys
from collections import defaultdict

try:
    from anytree import RenderTree
    from anytree.importer import DictImporter
except ImportError:
    sys.stderr.write(
        "Can't import 'anytree'. Please run 'pip install anytree' to enable this script here\n")
    sys.exit(-1)


sys.setrecursionlimit(20000)


def create_parser():
    parser = argparse.ArgumentParser(description='dot2tree')
    parser.add_argument(
        "--mode", choices=["taskdepends", "pkgdepend"], default="taskdepends", help="mode to operate in")
    parser.add_argument("--nosimplify", default=False,
                        action="store_true", help="Do not merge overlaping paths")
    parser.add_argument("root", help="Name of the root node or path to an image manifest")
    parser.add_argument("endnode", help="Stop tree at")
    parser.add_argument(
        "input", help="Path to input files [depends on mode selected]")
    return parser.parse_args()


_hits = []


def _reverse_search(_dict, start, name, _path):
    global _hits
    if start != name:
        for k, v in _dict.items():
            if name in v and k not in _path:
                _reverse_search(_dict, start, k, _path + [k])
    else:
        if _path and _path[-1] != name:
            _path.append(name)
        _hits.append(_path[::-1])


def _simplify(args):
    global _hits
    # TODO invent a good way to merge
    # overlaping paths -> SequenceMatcher isn't one :-(
    return _hits

def explode_root(args):
    if os.path.isfile(args.root):
        # treat it like an image manifest
        # base-files qemux86_64 3.0.14-r89
        with open(args.root) as i:
            return [x.group("pn") for x in re.finditer(r'^(?P<pn>.*?)\s+.*', i.read(), re.MULTILINE)]
    return [args.root]


def _captain_planet(args, _dict):
    global _hits
    # turn this into a tree!!! (to be exact a list of trees)
    result = []

    for rootnode in explode_root(args):
        _hits = []
        _reverse_search(_dict, rootnode, args.endnode, [args.endnode])
        _paths = _simplify(args)

        _tmpdict = {
            "name": rootnode,
            "children": [

            ]
        }
        for _p in _paths:
            _t = None
            for index, value in enumerate(_p[::-1][:-1]):
                if _t:
                    _t = {"name": value, "children": [_t]}
                else:
                    _t = {"name": value}
            _tmpdict["children"].append(_t)
        result.append(_tmpdict)
    return result

def read_pkg_data(_file):
    # RDEPENDS_libxcrypt: glibc (>= 2.33)
    #          ^PN      : ^depend ^ignore
    _dict = defaultdict(set)
    with open(_file) as i:
        for m in re.finditer(r'^RDEPENDS_(?P<pn>.*):\s+(?P<deps>.*)', i.read(), re.MULTILINE):
            _dict[m.group("pn")] = set(x for x in m.group("deps").split(" ") if x and not x.startswith("("))
    return _dict


def _parse_input(args):
    _dict = defaultdict(set)
    if args.mode == "taskdepends":
        _pattern = r"^\"(?P<target>.*?)\..*\"\s+->\s+\"(?P<depends>.*?)\..*\""
        with open(args.input) as i:
            for m in re.finditer(_pattern, i.read(), re.MULTILINE):
                if m.group("target") == m.group("depends"):
                    continue
                _dict[m.group("target")].add(m.group("depends"))
    elif args.mode == "pkgdepend":
        if not os.path.isdir(args.input) or not args.input.endswith("runtime-reverse"):
            print("you need to provide the '${PKGDATA_DIR}/runtime-reverse' path as input")
            sys.exit(1)
        # check that input is a dir ending on runtime-reverse
        for root, dirs, files in os.walk(args.input):
            for f in files:
                _dict.update(read_pkg_data(os.path.join(root, f)))
    return _dict


def main():
    _args = create_parser()
    _rawdict = _parse_input(_args)
    for tree in _captain_planet(_args, _rawdict):
        try:
            _tree = DictImporter().import_(tree)
            if not _tree.children:
                continue
            for pre, _, node in RenderTree(_tree):
                print("%s%s" % (pre, node.name))
        except AssertionError:
            pass


if __name__ == '__main__':
    main()
